from .dataset import Dataset
from .ops import Op

import typing
import numpy as np
import math

from random import shuffle as list_shuffle


class Batch:
    '''
    A (mini)batch generated by the batch generator.
    '''

    def __init__(self):
        '''
        Ctor.
        '''

        self.data = None
        self.label = None
        self.idx = None


class BatchGenerator:
    '''
    Batch generator.
    Returned batches have the following properties:
      data: numpy array holding batch data of shape (s, SHAPE_OF_DATASET_SAMPLES).
      labels: numpy array holding batch labels of shape (s, SHAPE_OF_DATASET_LABELS).
      idx: numpy array with shape (s,) encoding the indices of each sample in the original dataset.
    '''

    def __init__(self, dataset: Dataset, num: int, shuffle: bool, op: Op = None):
        '''
        Ctor.
        Dataset is the dataset to iterate over.
        num is the number of samples per batch. the number in the last batch might be smaller than that.
        shuffle controls whether the sample order should be preserved or not.
        op is an operation to apply to input samples.
        Raises TypeError on invalid argument types.
        Raises ValueError on invalid argument values, such as if num is > len(dataset).
        '''
        if num > len(dataset):
            raise ValueError()

        if not isinstance(dataset, Dataset) or not isinstance(num, int) or not isinstance(shuffle, bool) or (
                op is not None and not callable(op)):
            raise TypeError()

        self.batches = [Batch()] * math.ceil(len(dataset) / num)
        indices = list(range(0, len(dataset)))
        if shuffle:
            list_shuffle(indices)

        first_row = dataset[0] if len(dataset) > 0 else None
        first_row_data, _ = dataset.get_batch_data(sample=first_row)
        if op is not None and first_row is not None:
            first_row_data = op(first_row_data)
        for batch_index in range(0, len(self.batches)):
            sub_indices = indices[batch_index * num:(batch_index + 1) * num]

            batch = Batch()
            batch.data = np.zeros([len(sub_indices)] + list(first_row_data.shape), dtype=np.float32)
            batch.label = np.zeros((len(sub_indices),), dtype=np.int32)
            batch.idx = np.array(sub_indices)
            for batch_data_index, dataset_index in enumerate(sub_indices):
                row = dataset[dataset_index]
                row_data, row_label = dataset.get_batch_data(sample=row)

                if op is not None:
                    row_data = op(row_data)

                batch.data[batch_data_index] = row_data
                batch.label[batch_data_index] = row_label

            self.batches[batch_index] = batch

    def __len__(self) -> int:
        '''
        Returns the number of batches generated per iteration.
        '''
        return len(self.batches)

    def __iter__(self) -> typing.Iterable[Batch]:
        '''
        Iterate over the wrapped dataset, returning the data as batches.
        '''
        for batch in self.batches:
            yield batch
